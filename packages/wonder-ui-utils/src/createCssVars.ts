//https://github.com/jantimon/css-variable/blob/main/src/index.ts
import { isObject } from './validate';
import { snakeCase } from './string/snakeCase';
import { upperFirst } from './string/upperFirst';

type TValue = string | number;

type CSSVariableOptions = {
  name: string;
  //default value
  value?: TValue;
};
/**
 * Usually css-variable should always be used with its babel plugin
 *
 * However in some scenarios e.g. storybook / jest it might be difficult
 * to setup.
 * For those cases this counter provides a very basic fallback to generate
 * different ids.
 */
let fallbackId = 9 ** 9;

export class CSSVariable
  // Inherit from String to be compatible to most CSS-in-JS solutions
  // Hacky cast to any for reduced autocomplete
  extends String {
  readonly key: string;
  /** Name e.g. `--baseSize` */
  readonly name: string;
  /** Value e.g. `var(--baseSize, 12px)` */
  readonly val: string;

  constructor(name: string);
  /**
   * Creates a new CSS Variable with a unique autogenerated name
   * and a fallback value
   *
   * E.g. `var(--1isaui4-0, 12px)`
   */
  constructor(options: CSSVariableOptions);
  /*#__PURE__*/
  constructor(arg: any) {
    let optionArg;

    if (isObject(arg)) {
      optionArg = arg as CSSVariableOptions;
    }

    let name = optionArg ? optionArg.name : arg;
    if (name) {
      name = '--' + name;
    }

    const key = '--' + (fallbackId++).toString(16);
    const val = `var(${key}${optionArg ? `, ${optionArg.value}` : ''})`;
    const css = name ? `var(${name})` : val;

    super(css);
    this.val = val;
    this.key = key;
    this.name = name;
  }

  /** Create a CSS Object e.g. `{ "--baseSize": '12px' }` */
  toValue(newValue: TValue) {
    if (typeof newValue === 'number') {
      newValue = newValue + 'px';
    }

    if (this.name) {
      return { [this.key]: `var(${this.name}, ${newValue})` };
    }

    return { [this.key]: `${newValue})` };
  }
}

export function createCssVars<K extends string>(
  componentName: string,
  vars: K[]
) {
  const cssVariables = {} as Record<K, CSSVariable>;

  vars.forEach((v: K) => {
    cssVariables[v] = new CSSVariable(
      snakeCase(componentName + upperFirst(v), '-')
    );
  });

  const returnCssVarStyles = (values: Partial<Record<K, TValue>>) => {
    const result = {};

    for (let k in values) {
      Object.assign(result, cssVariables[k].toValue(values[k]!));
    }

    return result;
  };

  const getCssValue = (name: K) => cssVariables[name].val;

  const getCalcValue = (operator: '+' | '-' | '*' | '/', ...args: K[]) => {
    return `calc(${args
      .map((name) => getCssValue(name))
      .join(` ${operator} `)})`;
  };

  return {
    cssVariables,
    returnCssVarStyles,
    getCssValue,
    getCalcValue
  };
}
